name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  release:
    runs-on: ubuntu-latest

    name: Create Release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, fileinfo

      - name: Install dependencies
        run: composer install --no-dev --optimize-autoloader

      - name: Run tests
        run: |
          composer require "orchestra/testbench:^8.0" --dev
          vendor/bin/phpunit

      - name: Get the version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Extract changelog
        id: changelog
        run: |
          # Extract the changelog section for this version
          VERSION=${{ steps.get_version.outputs.VERSION }}
          # Remove the 'v' prefix if present
          VERSION_NUMBER=${VERSION#v}

          # Extract changelog section between version headers
          awk "/^## \[$VERSION_NUMBER\]/ {flag=1; next} /^## \[/ && flag {exit} flag" CHANGELOG.md > release_notes.md

          # If no specific version found, use unreleased section
          if [ ! -s release_notes.md ]; then
            awk "/^## \[Unreleased\]/ {flag=1; next} /^## \[/ && flag {exit} flag" CHANGELOG.md > release_notes.md
          fi

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Laravel Awesome Uploader ${{ steps.get_version.outputs.VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.VERSION, 'alpha') || contains(steps.get_version.outputs.VERSION, 'beta') || contains(steps.get_version.outputs.VERSION, 'rc') }}

  package:
    runs-on: ubuntu-latest
    needs: release

    name: Package for Distribution

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2

      - name: Install dependencies
        run: composer install --no-dev --optimize-autoloader

      - name: Create distribution package
        run: |
          # Create a clean package without development files
          mkdir -p dist/laravel-awesome-uploader

          # Copy essential files
          cp -r src dist/laravel-awesome-uploader/
          cp -r database dist/laravel-awesome-uploader/
          cp composer.json dist/laravel-awesome-uploader/
          cp README.md dist/laravel-awesome-uploader/
          cp CHANGELOG.md dist/laravel-awesome-uploader/
          cp LICENSE.md dist/laravel-awesome-uploader/

          # Create archive
          cd dist
          tar -czf laravel-awesome-uploader-${{ github.ref_name }}.tar.gz laravel-awesome-uploader/
          zip -r laravel-awesome-uploader-${{ github.ref_name }}.zip laravel-awesome-uploader/

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./dist/laravel-awesome-uploader-${{ github.ref_name }}.tar.gz
          asset_name: laravel-awesome-uploader-${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip

  notify:
    runs-on: ubuntu-latest
    needs: [release, package]
    if: always()

    name: Notify

    steps:
      - name: Notify on success
        if: needs.release.result == 'success' && needs.package.result == 'success'
        run: |
          echo "✅ Release ${{ github.ref_name }} created successfully!"
          # Add webhook notifications, Slack, Discord, etc. here if needed

      - name: Notify on failure
        if: needs.release.result == 'failure' || needs.package.result == 'failure'
        run: |
          echo "❌ Release ${{ github.ref_name }} failed!"
          # Add failure notifications here if needed
